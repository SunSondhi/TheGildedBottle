package org.theGildedBottle;

import at.favre.lib.crypto.bcrypt.BCrypt;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class LoginPage {
    JTextField emailField;
    JPasswordField passwordField;
    JButton loginButton;
    JLabel emailLabel;
    JLabel passwordLabel;
    JPanel loginPage;

    public static DbCon Con = new DbCon();
    private Statement stmt;

    public LoginPage(ContentManager cM) {
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {


                PreparedStatement checkLoginCredentials = null;
                ResultSet resultSet = null;

                try {
                    Connection con = DbCon.getConnection();
                    String email = emailField.getText();
                    String password = passwordField.getText();
                    // Query user
                    checkLoginCredentials = con.prepareStatement("SELECT password, role FROM users WHERE email = ?;");
                    checkLoginCredentials.setString(1, email);

                    resultSet = checkLoginCredentials.executeQuery();


                    // If user does not exist then display an error
                    if (!resultSet.isBeforeFirst()) {
                        String message = "Incorrect login credentials please try again.";
                        JOptionPane.showMessageDialog(null, message, "Login credentials errors", JOptionPane.WARNING_MESSAGE);

                        return;
                    }

                    resultSet.next();
                    String retrievedPassword = resultSet.getString("password");
                    int retrievedType = resultSet.getInt("role");

                    BCrypt.Verifyer v = BCrypt.verifyer();

                    // Check password by comparing the entered password to the password from the database
                    if (!v.verify(password.toCharArray(), retrievedPassword.toCharArray()).verified) {
                        String message = "Incorrect login credentials please try again.";
                        JOptionPane.showMessageDialog(null, message, "Login credentials errors", JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                    // Check role
                    if (retrievedType != 1) {
                        String message = "You are not an admin. Please contact an administrator to upgrade your role.";
                        JOptionPane.showMessageDialog(null, message, "Not Admin", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    System.out.println("logged in");
                    cM.Login();

                } catch (SQLException i) {
                    i.printStackTrace();
                } catch (Exception x) {
                    x.printStackTrace();
                }
            }

        });


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        loginPage = new JPanel();
        loginPage.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        emailField = new JTextField();
        loginPage.add(emailField, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(156, 30), null, 0, false));
        passwordField = new JPasswordField();
        loginPage.add(passwordField, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(156, 30), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        loginPage.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(156, 14), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        loginPage.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setActionCommand("Homepage");
        loginButton.setText("Login");
        loginButton.setMnemonic('L');
        loginButton.setDisplayedMnemonicIndex(0);
        loginPage.add(loginButton, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(156, 30), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        loginPage.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(4, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(156, 14), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        loginPage.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(40, -1), null, 0, false));
        emailLabel = new JLabel();
        emailLabel.setText("Email ");
        loginPage.add(emailLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordLabel = new JLabel();
        passwordLabel.setText("Password ");
        loginPage.add(passwordLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return loginPage;
    }
}
